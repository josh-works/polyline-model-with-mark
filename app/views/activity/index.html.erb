 <%= link_to "root", root_path %> <br>
 <%= link_to "last 10 days", "?days=10"  %> <br>
 <%= link_to "last 30 days", "?days=30"  %> <br>
 <%= link_to "last 60 days", "?days=60"  %>  <br>
 <%= link_to "january 2023 activity", "?begin=20230101&end=20230131"  %> <br>
 <%= link_to "february 2023 activity", "?begin=20230201&end=20230228"  %> <br>
 <%= link_to "march 2023 activity", "?begin=20230301&end=20230331"  %> <br>
 <%= link_to "april 2023 activity", "?begin=20230401&end=20230430"  %> <br>
 <%= link_to "seattle", "?latlng=39.681635,-105.040421"  %> <br>

 <div id="map" style="width: 100%; height: 100%;">
 hi <br> there
 <br> <br> <br> <br> <br> <br> <br> <br> <br> 
 <br> <br> <br> <br> <br> <br> <br> <br> <br> 
 <br> <br> <br> <br> <br> <br> <br> <br> <br> 
 <br> <br> <br> <br> <br> <br> <br> <br> <br>
 <br> <br> <br> <br> <br> <br> <br> <br> <br>
 </div>
     <script>
      window.polylines = "<%= j @polylines %>"

      var map = L.map('map').setView([ 39.681635, -105.040421 ], 12);
      L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 22,
        minZoom: 1,
        id: 'mapbox/satellite-v9',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: 'pk.eyJ1Ijoiam9zaHdvcmtzIiwiYSI6ImNrcWk2NzUxeTJhbm8yem4weDFreTY5bjQifQ.Qja1F9B1-i7hK3KOvSYAvg'
      }).addTo(map);
      decoded = JSON.parse(window.polylines)
      var i = 0
      polyline_count = decoded.length
      console.log(polyline_count)

        for (let run of decoded) {
          i += 1
          var coordinates = L.Polyline.fromEncoded(run).getLatLngs();
          L.polyline(
            coordinates,
            {
                color: randbow(polyline_count, i),
                weight: 3,
                opacity: .7,
                lineJoin: 'round'
            }
        ).addTo(map);
        
        }

        /**
         * @param numOfSteps: Total number steps to get color, means total colors
         * @param step: The step number, means the order of the color
         */
        function randbow(numOfSteps, step) {
            // This function generates vibrant, "evenly spaced" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.
            // Adam Cole, 2011-Sept-14
            // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
            var r, g, b;
            var h = step / numOfSteps;
            var i = ~~(h * 6);
            var f = h * 6 - i;
            var q = 1 - f;
            switch(i % 6){
                case 0: r = 1; g = f; b = 0; break;
                case 1: r = q; g = 1; b = 0; break;
                case 2: r = 0; g = 1; b = f; break;
                case 3: r = 0; g = q; b = 1; break;
                case 4: r = f; g = 0; b = 1; break;
                case 5: r = 1; g = 0; b = q; break;
            }
            var c = "#" + ("00" + (~ ~(r * 255)).toString(16)).slice(-2) + ("00" + (~ ~(g * 255)).toString(16)).slice(-2) + ("00" + (~ ~(b * 255)).toString(16)).slice(-2);
            return (c);
        }


        // add start/finish marker to map via `coordinates``
        // https://code.dblock.org/2018/02/17/auto-publishing-strava-runs-to-github-pages.html
     </script>

<h1>Activity#index</h1>
<p>Find me in app/views/activity/index.html.erb</p>

first polyline:
<pre>
<%= JSON.parse(@polylines).first %>
</pre>

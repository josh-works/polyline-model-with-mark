<div class="filters">
<ul>
  <div class="by_time">
 <li><%= link_to "root", root_path %> </li>
 <li><%= link_to "last 10 days", "?days=10"  %> </li>
 <li><%= link_to "last 30 days", "?days=30"  %> </li>
 <li><%= link_to "last 60 days", "?days=60"  %>  </li>
 <li><%= link_to "january 2023 activity", "?begin=20230101&end=20230131"  %> </li>
 <li><%= link_to "february 2023 activity", "?begin=20230201&end=20230228"  %> </li>
 <li><%= link_to "march 2023 activity", "?begin=20230301&end=20230331"  %> </li>
 <li><%= link_to "april 2023 activity", "?begin=20230401&end=20230430"  %> </li>
 <li><%= link_to "2020 activity", "?begin=20200101&end=20201231"  %> </li>
 <li><%= link_to "2021 activity", "?begin=20210101&end=20211231"  %> </li>
 <li><%= link_to "2022 activity", "?begin=20220101&end=20221231"  %> </li>
 <li><%= link_to "2023 activity", "?begin=20230101&end=20231231"  %> </li>
 </div>
 <div class="by_location">
 <li><%= link_to "seattle", "?latlng=47.606201,-122.322671"  %> </li>
 <li><%= link_to "denver", "?latlng=39.681635,-105.040421"  %> </li>
 <li><%= link_to "bali", "?latlng=-8.507687,115.261011"  %> </li>
 <li><%= link_to "oslo", "?latlng=59.916448,10.752065"  %> </li>
 </div>
</ul>
</div>

 <div id="map">
 hi <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br><br> <br> <br> <br> <br> <br> <br> <br> <br><br> <br> <br> <br> <br> <br> <br> <br> <br><br><br> there
 <br> <br>
 </div>
     <script>
      window.polylines = "<%= j @polylines %>"
      var paramsArray = window.location.search.slice(1).split("&")
      
      var queryParams = {}
      for(var i = 0; i < paramsArray.length; i++) {
        var split = paramsArray[i].split("=")

        queryParams[split[0]] = split[1]
        console.log(queryParams)
      };

      

      
      if (queryParams["latlng"]){
       var latlng = queryParams["latlng"]
      } else { 
       var latlng = "39.681635,-105.040421"
      }

      if (queryParams["zoom"]){
        var zoom = queryParams["zoom"]
      } else {
        var zoom = "14"
      }
      
      
      var map = L.map('map').setView( latlng.split(","), zoom);
      L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 22,
        minZoom: 1,
        id: 'mapbox/satellite-v9',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: 'pk.eyJ1Ijoiam9zaHdvcmtzIiwiYSI6ImNrcWk2NzUxeTJhbm8yem4weDFreTY5bjQifQ.Qja1F9B1-i7hK3KOvSYAvg'
      }).addTo(map);
      decoded = JSON.parse(window.polylines)
      var i = 0
      var polyline_count = decoded.length
      console.log(polyline_count)

        for (let run of decoded) {
          i += 1
          
          var coordinates = L.Polyline.fromEncoded(run["summary"]).getLatLngs();
          var line = L.polyline(
            coordinates,
            {
                color: randbow(polyline_count, i),
                weight: 3,
                opacity: .7,
                lineJoin: 'round'
            }
          ).addTo(map);
          // marker = L.marker(coordinates[0]).addTo(map)

          var initialStyles = line.options

          line.on('mouseover', function(e){
            var popup = L.popup();
            popup.setContent(run["activity_name"] + "<a href=\"33\">run</a>");

            this.bindPopup(popup);
            popup.setLatLng(e.latlng).openOn(map);
            this.setStyle({
              weight: 7,
              opacity: 2
            })
          });

          line.on('mouseout', function(e) {
            this.setStyle({
              weight: 3, 
              opacity: .7

              });

            e.target.closePopup();
          });
      
        }

        /**
         * @param numOfSteps: Total number steps to get color, means total colors
         * @param step: The step number, means the order of the color
         */
        function randbow(numOfSteps, step) {
            // This function generates vibrant, "evenly spaced" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.
            // Adam Cole, 2011-Sept-14
            // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
            var r, g, b;
            var h = step / numOfSteps;
            var i = ~~(h * 6);
            var f = h * 6 - i;
            var q = 1 - f;
            switch(i % 6){
                case 0: r = 1; g = f; b = 0; break;
                case 1: r = q; g = 1; b = 0; break;
                case 2: r = 0; g = 1; b = f; break;
                case 3: r = 0; g = q; b = 1; break;
                case 4: r = f; g = 0; b = 1; break;
                case 5: r = 1; g = 0; b = q; break;
            }
            var c = "#" + ("00" + (~ ~(r * 255)).toString(16)).slice(-2) + ("00" + (~ ~(g * 255)).toString(16)).slice(-2) + ("00" + (~ ~(b * 255)).toString(16)).slice(-2);
            return (c);
        }


        // add start/finish marker to map via `coordinates``
        // https://code.dblock.org/2018/02/17/auto-publishing-strava-runs-to-github-pages.html


        map.on('click', function(e){
        var lt = String(e.latlng.lat);
        var lg = String(e.latlng.lng);
        var popup = L.popup()
          .setLatLng(e.latlng)
          .setContent(lt + " " + lg)
          .openOn(map);
      });
     </script>

<h1>Activity#index</h1>
<p>Find me in app/views/activity/index.html.erb</p>

<table>
  <tr>
    <th>Activity Name </th>         
    <th>Started At </th>                      
    <th>detail </th>
  </tr>

<% @decoded_polylines = JSON.parse(@polylines) %>
<% @decoded_polylines.each do |p| %>
  <tr>
    <td><%= p["activity_name"]%></td>
    <td><%= p["activity_started_at_date_time"]%></td>
    <td><%= link_to "show more", activity_show_path(p["id"] )%></td>
  </tr>
 
<% end %>


